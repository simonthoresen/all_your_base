package all.your.base.math;

import all.your.base.tiled.Tile;
import all.your.base.tiled.TileSet;
import all.your.base.tiled.TileSheets;
import org.junit.Test;

import java.awt.Color;

import static org.junit.Assert.assertEquals;

/**
 * @author <a href="mailto:simon@yahoo-inc.com">Simon Thoresen Hult</a>
 */
public class LightMapTestCase {

    private final static char[] HEX = ".123456789ABCDEF".toCharArray();

    @Test
    public void requireThatAllPlanesOfMapIsCreated() {
        Board board = new Board(new TileSet.Builder().addTile(new Tile.Builder().setIsOpaque(false).build())
                                                     .addTile(new Tile.Builder().setIsOpaque(true).build())
                                                     .build(),
                                TileSheets.fromString("1111111111111\n" +
                                                      "1000000000001\n" +
                                                      "1000000000001\n" +
                                                      "1001001001001\n" +
                                                      "1000000000001\n" +
                                                      "1001000001001\n" +
                                                      "1000000000001\n" +
                                                      "1001001001001\n" +
                                                      "1000000000001\n" +
                                                      "1000000000001\n" +
                                                      "1111111111111\n"));
        assertLight(board, new Light(Color.CYAN, 3), new Point(8, 5),
                    "...##.....### ............. ............. .............\n" +
                    "....#.....##. ............. ............. .............\n" +
                    "##...#....#.. ............. ............. .............\n" +
                    "............. ............. .......454... .......454...\n" +
                    "............. ............. ......48A84.. ......48A84..\n" +
                    "###.......### ............. ......5AFA... ......5AFA...\n" +
                    "............. ............. ......48A84.. ......48A84..\n" +
                    "............. ............. .......454... .......454...\n" +
                    "##...#....#.. ............. ............. .............\n" +
                    "....#.....##. ............. ............. .............\n" +
                    "...##.....### ............. ............. .............\n");
        assertLight(board, new Light(Color.CYAN, 5), new Point(8, 5),
                    "...##.....### ............. ............. .............\n" +
                    "....#.....##. ............. ......1232... ......1232...\n" +
                    "##...#....#.. ............. ......4565.2. ......4565.2.\n" +
                    "............. ............. ....146898641 ....146898641\n" +
                    "............. ............. ....258BCB852 ....258BCB852\n" +
                    "###.......### ............. ....369CFC... ....369CFC...\n" +
                    "............. ............. ....258BCB852 ....258BCB852\n" +
                    "............. ............. ....146898641 ....146898641\n" +
                    "##...#....#.. ............. ......4565.2. ......4565.2.\n" +
                    "....#.....##. ............. ......1232... ......1232...\n" +
                    "...##.....### ............. ............. .............\n");
        assertLight(board, new Light(Color.CYAN, 8), new Point(8, 5),
                    "...##.....### ............. .....45555... .....45555...\n" +
                    "....#.....##. ............. ..13.57777..4 ..13.57777..4\n" +
                    "##...#....#.. ............. ..245.8999.75 ..245.8999.75\n" +
                    "............. ............. .13578ABBBA87 .13578ABBBA87\n" +
                    "............. ............. .13579BDDDB97 .13579BDDDB97\n" +
                    "###.......### ............. ...579BDFD... ...579BDFD...\n" +
                    "............. ............. .13579BDDDB97 .13579BDDDB97\n" +
                    "............. ............. .13578ABBBA87 .13578ABBBA87\n" +
                    "##...#....#.. ............. ..245.8999.75 ..245.8999.75\n" +
                    "....#.....##. ............. ..13.57777..4 ..13.57777..4\n" +
                    "...##.....### ............. .....45555... .....45555...\n");
        assertLight(board, new Light(Color.RED, 10), new Point(8, 5),
                    "...##.....### .23..67777... ............. .............\n" +
                    "....#.....##. 1345.78999..6 ............. .............\n" +
                    "##...#....#.. ..567.AABA.97 ............. .............\n" +
                    "............. 24578ABCCCBA8 ............. .............\n" +
                    "............. 34679ACDEDCA9 ............. .............\n" +
                    "###.......### ...79BCEFE... ............. .............\n" +
                    "............. 34679ACDEDCA9 ............. .............\n" +
                    "............. 24578ABCCCBA8 ............. .............\n" +
                    "##...#....#.. ..567.AABA.97 ............. .............\n" +
                    "....#.....##. 1345.78999..6 ............. .............\n" +
                    "...##.....### .23..67777... ............. .............\n");
        assertLight(board, new Light(Color.GREEN, 10), new Point(8, 5),
                    "...##.....### ............. .23..67777... .............\n" +
                    "....#.....##. ............. 1345.78999..6 .............\n" +
                    "##...#....#.. ............. ..567.AABA.97 .............\n" +
                    "............. ............. 24578ABCCCBA8 .............\n" +
                    "............. ............. 34679ACDEDCA9 .............\n" +
                    "###.......### ............. ...79BCEFE... .............\n" +
                    "............. ............. 34679ACDEDCA9 .............\n" +
                    "............. ............. 24578ABCCCBA8 .............\n" +
                    "##...#....#.. ............. ..567.AABA.97 .............\n" +
                    "....#.....##. ............. 1345.78999..6 .............\n" +
                    "...##.....### ............. .23..67777... .............\n");
        assertLight(board, new Light(Color.BLUE, 10), new Point(8, 5),
                    "...##.....### ............. ............. .23..67777...\n" +
                    "....#.....##. ............. ............. 1345.78999..6\n" +
                    "##...#....#.. ............. ............. ..567.AABA.97\n" +
                    "............. ............. ............. 24578ABCCCBA8\n" +
                    "............. ............. ............. 34679ACDEDCA9\n" +
                    "###.......### ............. ............. ...79BCEFE...\n" +
                    "............. ............. ............. 34679ACDEDCA9\n" +
                    "............. ............. ............. 24578ABCCCBA8\n" +
                    "##...#....#.. ............. ............. ..567.AABA.97\n" +
                    "....#.....##. ............. ............. 1345.78999..6\n" +
                    "...##.....### ............. ............. .23..67777...\n");
    }

    private static void assertLight(Board board, Light light, Point pos, String expectedLight) {
        LightMap map = LightMap.newInstance(board, new Rectangle(0, 0, board.width(), board.height()), light, pos);
        StringBuilder out = new StringBuilder();
        for (int y = 0; y < map.height(); ++y) {
            for (int x = 0; x < map.width(); ++x) {
                out.append(map.canSee(x, y) ? '.' : "#");
            }
            out.append(" ");
            for (int x = 0; x < map.width(); ++x) {
                out.append(toHex((map.getColor(x, y) & 0x00FF0000) >> 16));
            }
            out.append(" ");
            for (int x = 0; x < map.width(); ++x) {
                out.append(toHex((map.getColor(x, y) & 0x0000FF00) >> 8));
            }
            out.append(" ");
            for (int x = 0; x < map.width(); ++x) {
                out.append(toHex(map.getColor(x, y) & 0x000000FF));
            }
            out.append("\n");
        }
        assertEquals(expectedLight, out.toString());
    }

    private static char toHex(int val) {
        return HEX[(val & 0xFF) / 16];
    }
}
